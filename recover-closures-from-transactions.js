const fs = require('fs');

console.log('=== R√âCUP√âRATION DES CL√îTURES DEPUIS LES TRANSACTIONS ===');

// Lire le fichier de donn√©es r√©cup√©r√©es
try {
  const recoveredData = JSON.parse(fs.readFileSync('recovered-data.json', 'utf8'));
  
  console.log('üìä Donn√©es r√©cup√©r√©es:');
  console.log(`  Jours avec transactions: ${Object.keys(recoveredData.transactionsByDay).length}`);
  
  const transactionsByDay = recoveredData.transactionsByDay;
  const closures = [];
  
  // Parcourir chaque jour et cr√©er des cl√¥tures
  Object.keys(transactionsByDay).forEach(date => {
    const transactions = transactionsByDay[date];
    
    if (transactions.length > 0) {
      // Calculer le total CA
      const totalCA = transactions.reduce((sum, tx) => sum + (tx.total || 0), 0);
      
      // Cr√©er une cl√¥ture
      const closure = {
        zNumber: closures.length + 1, // Z1, Z2, etc.
        closedAt: `${date}T23:59:59.000Z`, // Fin de journ√©e
        transactions: transactions,
        totalCA: totalCA,
        totalTransactions: transactions.length
      };
      
      closures.push(closure);
      
      console.log(`üìÖ ${date}: ${transactions.length} transactions, CA: ${totalCA.toFixed(2)} ‚Ç¨ -> Z${closure.zNumber}`);
    }
  });
  
  console.log(`\nüìä R√âSUM√â:`);
  console.log(`  Cl√¥tures cr√©√©es: ${closures.length}`);
  
  if (closures.length > 0) {
    // Cr√©er le script de r√©cup√©ration pour le navigateur
    const recoveryScript = `
// Script de r√©cup√©ration des cl√¥tures depuis les transactions
console.log('=== R√âCUP√âRATION DES CL√îTURES ===');

// Cl√¥tures r√©cup√©r√©es depuis les transactions
const recoveredClosures = ${JSON.stringify(closures, null, 2)};

console.log('üìä Cl√¥tures √† r√©cup√©rer:', recoveredClosures.length);

// Sauvegarder les cl√¥tures
if (recoveredClosures.length > 0) {
  localStorage.setItem('klick_caisse_closures', JSON.stringify(recoveredClosures));
  console.log('‚úÖ Cl√¥tures sauvegard√©es');
  
  // Afficher les d√©tails
  recoveredClosures.forEach(closure => {
    console.log(\`Z\${closure.zNumber}: \${closure.transactions.length} transactions, CA: \${closure.totalCA.toFixed(2)} ‚Ç¨\`);
  });
}

// V√©rifier la sauvegarde
const savedClosures = localStorage.getItem('klick_caisse_closures');
console.log('üìä V√©rification:');
console.log('  Cl√¥tures sauvegard√©es:', savedClosures ? JSON.parse(savedClosures).length : 0);

alert(\`‚úÖ R√©cup√©ration termin√©e! \${recoveredClosures.length} cl√¥tures r√©cup√©r√©es. Rechargez la page pour voir les cl√¥tures.\`);
`;

    fs.writeFileSync('recovery-closures-from-transactions.js', recoveryScript);
    console.log('‚úÖ Script de r√©cup√©ration cr√©√©: recovery-closures-from-transactions.js');
    
    // Cr√©er aussi un fichier JSON avec les cl√¥tures
    const closuresData = {
      closures: closures,
      recoveredAt: new Date().toISOString(),
      source: 'transactions_by_day'
    };
    
    fs.writeFileSync('recovered-closures.json', JSON.stringify(closuresData, null, 2));
    console.log('‚úÖ Cl√¥tures r√©cup√©r√©es sauvegard√©es: recovered-closures.json');
    
    console.log('\nüìã INSTRUCTIONS:');
    console.log('1. Ouvrez la console du navigateur (F12)');
    console.log('2. Copiez-collez le contenu de recovery-closures-from-transactions.js');
    console.log('3. Appuyez sur Entr√©e');
    console.log('4. Rechargez la page pour voir les cl√¥tures');
    
  } else {
    console.log('‚ùå Aucune transaction trouv√©e pour cr√©er des cl√¥tures');
  }
  
} catch (error) {
  console.error('‚ùå Erreur:', error.message);
  console.log('\nüìã V√©rifiez que le fichier recovered-data.json existe');
}

console.log('\n‚úÖ Diagnostic termin√©!');
