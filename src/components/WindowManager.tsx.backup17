import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  IconButton,
  Button,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  TextField,
} from '@mui/material';
import {
  Add,
  Remove,
  ImportExport,
  Search,
} from '@mui/icons-material';
import { Product, Category, CartItem, ProductVariation } from '../types/Product';
import VariationModal from './VariationModal';

interface Window {
  id: string;
  title: string;
  type: 'products' | 'cart' | 'categories' | 'search' | 'settings' | 'import';
  x: number;
  y: number;
  width: number;
  height: number;
  isMinimized: boolean;
  isMaximized: boolean;
  zIndex: number;
}

interface WindowManagerProps {
  products: Product[];
  categories: Category[];
  cartItems: CartItem[];
  isLayoutLocked: boolean;
  onProductClick: (product: Product) => void;
  onProductWithVariationClick: (product: Product, variation: ProductVariation) => void;
  onUpdateQuantity: (productId: string, variationId: string | null, quantity: number) => void;
  onRemoveItem: (productId: string, variationId: string | null) => void;
  onCheckout: () => void;
  onImportComplete: (products: Product[], categories: Category[]) => void;
}

const WindowManager: React.FC<WindowManagerProps> = ({
  products,
  categories,
  cartItems,
  isLayoutLocked,
  onProductClick,
  onProductWithVariationClick,
  onUpdateQuantity,
  onRemoveItem,
  onCheckout,
  onImportComplete,
}) => {
  // Dimensions pour l'émulation 1920×1080
  const APP_BAR_HEIGHT = 64;

  // États pour la modale de déclinaisons
  const [variationModalOpen, setVariationModalOpen] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);

  const [windows, setWindows] = useState<Window[]>([
                   {
        id: 'products',
        title: 'Grille Produits',
        type: 'products',
        x: 20, // Même x que la fenêtre catégories
        y: 210, // Juste en dessous de la fenêtre catégories (80 + 120 + 10)
        width: 800, // Largeur personnalisée
        height: 600, // Hauteur personnalisée
        isMinimized: false,
        isMaximized: false,
        zIndex: 1,
      },
                          {
         id: 'cart',
         title: 'Panier & Ticket',
         type: 'cart',
         x: 832.33, // Position avec espacement de 10px (20 + 802.33 + 10)
         y: 80, // Même y que la fenêtre catégories
         width: 405, // Largeur exacte mesurée
         height: 600, // Hauteur exacte mesurée
         isMinimized: false,
         isMaximized: false,
         zIndex: 2,
       },
                                                                                                                                                               {
           id: 'categories',
           title: 'Catégories',
           type: 'categories',
           x: 20, // Position personnalisée - coin haut gauche de l'espace fenêtre
           y: 80, // Position personnalisée - coin haut gauche de l'espace fenêtre
           width: 802.33, // Largeur exacte mesurée
           height: 121.33, // Hauteur exacte mesurée
           isMinimized: false,
           isMaximized: false,
           zIndex: 3,
         },
                          {
         id: 'search',
         title: 'Modes de Règlement',
         type: 'search',
         x: 832.33, // Même x que la fenêtre ticket
         y: 700, // En dessous de la fenêtre ticket avec espacement (80 + 600 + 20)
         width: 405.33, // Largeur exacte mesurée
         height: 187.33, // Hauteur exacte mesurée
         isMinimized: false,
         isMaximized: false,
         zIndex: 4,
       },
                  {
         id: 'window5',
         title: 'Fonction',
         type: 'settings',
         x: 20, // À gauche
         y: 820, // Sous la grille de produits avec espacement (210 + 600 + 20)
         width: 401.3, // Largeur exacte mesurée
         height: 189.33, // Hauteur exacte mesurée
         isMinimized: false,
         isMaximized: false,
         zIndex: 5,
       },
             {
         id: 'window6',
         title: 'Fenêtre Libre 2',
         type: 'import',
         x: 431.3, // À côté de la première avec espacement (20 + 401.3 + 10)
         y: 820, // Sous la grille de produits avec espacement (210 + 600 + 20)
         width: 388.63, // Largeur ajustée par l'utilisateur
         height: 190.66, // Hauteur ajustée par l'utilisateur
         isMinimized: false,
         isMaximized: false,
         zIndex: 6,
       },
       {
         id: 'window7',
         title: 'Fenêtre Libre 3',
         type: 'settings',
         x: 832.33, // Même x que la fenêtre Modes de Règlement
         y: 897.33, // Sous la fenêtre Modes de Règlement avec espacement (700 + 187.33 + 10)
         width: 406.66, // Largeur ajustée par l'utilisateur
         height: 113, // Hauteur ajustée par l'utilisateur
         isMinimized: false,
         isMaximized: false,
         zIndex: 7,
       },
    
  ]);

  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [draggedWindow, setDraggedWindow] = useState<string | null>(null);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [resizingWindow, setResizingWindow] = useState<string | null>(null);
  const [resizeDirection, setResizeDirection] = useState<string>('');
  const [resizeStart, setResizeStart] = useState({ x: 0, y: 0, width: 0, height: 0 });
  const [screenDimensions, setScreenDimensions] = useState({
    width: window.innerWidth,
    height: window.innerHeight
  });

  // Fonction pour obtenir une couleur professionnelle basée sur la catégorie
  const getCategoryColor = (categoryId: string) => {
    // Palette de couleurs professionnelles et harmonieuses
    const colors = [
      '#2E86AB', // Bleu professionnel
      '#A23B72', // Rose bordeaux
      '#F18F01', // Orange doré
      '#C73E1D', // Rouge bordeaux
      '#3A86FF', // Bleu moderne
      '#8338EC', // Violet moderne
      '#06FFA5', // Vert menthe
      '#FFBE0B', // Jaune doré
      '#FB5607', // Orange vif
      '#FF006E', // Rose vif
      '#8338EC', // Violet
      '#3A86FF', // Bleu ciel
      '#06FFA5', // Vert émeraude
      '#FFBE0B', // Jaune ambre
      '#FB5607', // Orange corail
      '#FF006E', // Rose magenta
      '#8338EC', // Violet royal
      '#3A86FF', // Bleu azur
      '#06FFA5', // Vert jade
      '#FFBE0B', // Jaune citron
      '#FB5607', // Orange mandarine
      '#FF006E', // Rose framboise
      '#8338EC', // Violet améthyste
      '#3A86FF', // Bleu cobalt
      '#06FFA5', // Vert sauge
      '#FFBE0B', // Jaune miel
      '#FB5607', // Orange abricot
      '#FF006E', // Rose pivoine
      '#8338EC', // Violet lavande
      '#3A86FF', // Bleu marine
      '#06FFA5', // Vert forêt
      '#FFBE0B', // Jaune soleil
      '#FB5607', // Orange coucher de soleil
      '#FF006E', // Rose cerise
      '#8338EC', // Violet nuit
      '#3A86FF', // Bleu océan
      '#06FFA5', // Vert printemps
      '#FFBE0B', // Jaune automne
      '#FB5607', // Orange feu
      '#FF006E'  // Rose passion
    ];
    
    // Générer une couleur basée sur le hash de la catégorie pour être cohérent
    let hash = 0;
    for (let i = 0; i < categoryId.length; i++) {
      hash = categoryId.charCodeAt(i) + ((hash << 5) - hash);
    }
    const index = Math.abs(hash) % colors.length;
    
    return colors[index];
  };

  const CARDS_PER_PAGE = 25; // 5×5 produits au lieu de 5×6
  const filteredProducts = products.filter(product => {
    const matchesCategory = !selectedCategory || product.category === selectedCategory;
    const matchesSearch = !searchTerm || 
      product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      product.category.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const startIndex = (currentPage - 1) * CARDS_PER_PAGE;
  const endIndex = startIndex + CARDS_PER_PAGE;
  const currentProducts = filteredProducts.slice(startIndex, endIndex);
  const totalPages = Math.ceil(filteredProducts.length / CARDS_PER_PAGE);

  const bringToFront = (windowId: string) => {
    setWindows(prev => prev.map(w => ({
      ...w,
      zIndex: w.id === windowId ? Math.max(...prev.map(w => w.zIndex)) + 1 : w.zIndex
    })));
  };

  const handleMouseDown = (e: React.MouseEvent, windowId: string) => {
    if (isLayoutLocked) return; // Désactive le déplacement si verrouillé
    
    const window = windows.find(w => w.id === windowId);
    if (!window) return;

    const rect = e.currentTarget.getBoundingClientRect();
    setDragOffset({
      x: e.clientX - rect.left,
      y: e.clientY - rect.top
    });
    setDraggedWindow(windowId);
    bringToFront(windowId);
  };

  const handleMouseMove = (e: MouseEvent) => {
    if (draggedWindow) {
      setWindows(prev => prev.map(w => {
        if (w.id === draggedWindow) {
          const newX = e.clientX - dragOffset.x;
          const newY = e.clientY - dragOffset.y;
                     // Utiliser les dimensions réelles de l'écran pour plus de flexibilité
           return {
             ...w,
             x: Math.max(0, Math.min(screenDimensions.width - w.width, newX)),
             y: Math.max(0, Math.min(screenDimensions.height - APP_BAR_HEIGHT - w.height, newY))
           };
        }
        return w;
      }));
    } else if (resizingWindow) {
      setWindows(prev => prev.map(w => {
        if (w.id === resizingWindow) {
          const deltaX = e.clientX - resizeStart.x;
          const deltaY = e.clientY - resizeStart.y;
          
          let newWidth = resizeStart.width;
          let newHeight = resizeStart.height;
          let newX = w.x;
          let newY = w.y;

          // Limites minimales
          const MIN_WIDTH = 200;
          const MIN_HEIGHT = 100;

                     if (resizeDirection.includes('e')) {
             newWidth = Math.max(MIN_WIDTH, Math.min(screenDimensions.width - w.x, resizeStart.width + deltaX));
           }
           if (resizeDirection.includes('w')) {
             const maxWidth = w.x + resizeStart.width;
             const newW = Math.max(MIN_WIDTH, Math.min(maxWidth, resizeStart.width - deltaX));
             newX = w.x + (resizeStart.width - newW);
             newWidth = newW;
           }
           if (resizeDirection.includes('s')) {
             newHeight = Math.max(MIN_HEIGHT, Math.min(screenDimensions.height - APP_BAR_HEIGHT - w.y, resizeStart.height + deltaY));
           }
           if (resizeDirection.includes('n')) {
             const maxHeight = w.y + resizeStart.height;
             const newH = Math.max(MIN_HEIGHT, Math.min(maxHeight, resizeStart.height - deltaY));
             newY = w.y + (resizeStart.height - newH);
             newHeight = newH;
           }

           // S'assurer que la fenêtre reste dans les limites de l'écran réel
           const finalX = Math.max(0, Math.min(screenDimensions.width - newWidth, newX));
           const finalY = Math.max(0, Math.min(screenDimensions.height - APP_BAR_HEIGHT - newHeight, newY));

          return {
            ...w,
            x: finalX,
            y: finalY,
            width: newWidth,
            height: newHeight
          };
        }
        return w;
      }));
    }
  };

  const handleMouseUp = () => {
    setDraggedWindow(null);
    setResizingWindow(null);
    setResizeDirection('');
  };

  const handleResizeStart = (e: React.MouseEvent, windowId: string, direction: string) => {
    if (isLayoutLocked) return; // Désactive le redimensionnement si verrouillé
    
    e.stopPropagation();
    const window = windows.find(w => w.id === windowId);
    if (!window) return;

    setResizeStart({
      x: e.clientX,
      y: e.clientY,
      width: window.width,
      height: window.height
    });
    setResizingWindow(windowId);
    setResizeDirection(direction);
    bringToFront(windowId);
  };

  useEffect(() => {
    if (draggedWindow || resizingWindow) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [draggedWindow, dragOffset, resizingWindow, resizeDirection, resizeStart]);

  // Mettre à jour les dimensions de l'écran quand la fenêtre change de taille
  useEffect(() => {
    const handleResize = () => {
      setScreenDimensions({
        width: window.innerWidth,
        height: window.innerHeight
      });
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const toggleMinimize = (windowId: string) => {
    if (isLayoutLocked) return; // Désactive la minimisation si verrouillé
    setWindows(prev => prev.map(w => 
      w.id === windowId ? { ...w, isMinimized: !w.isMinimized } : w
    ));
  };

  const toggleMaximize = (windowId: string) => {
    if (isLayoutLocked) return; // Désactive la maximisation si verrouillé
    setWindows(prev => prev.map(w => 
      w.id === windowId ? { ...w, isMaximized: !w.isMaximized } : w
    ));
  };

  // Fonctions de gestion des déclinaisons
  const handleProductClick = (product: Product) => {
    if (product.variations.length > 0) {
      // Ouvrir la modale de déclinaisons
      setSelectedProduct(product);
      setVariationModalOpen(true);
    } else {
      // Ajouter directement au panier
      onProductClick(product);
    }
  };

  const handleVariationSelect = (variation: ProductVariation) => {
    if (selectedProduct) {
      onProductWithVariationClick(selectedProduct, variation);
    }
  };



  const renderResizeHandles = (window: Window) => {
    if (window.isMinimized || isLayoutLocked) return null;

    const handleSize = 12;
    const handleStyle = {
      position: 'absolute' as const,
      backgroundColor: 'rgba(255, 255, 255, 0.9)',
      border: '2px solid #1976d2',
      borderRadius: '2px',
      zIndex: 1000,
      transition: 'all 0.2s',
      '&:hover': {
        backgroundColor: 'rgba(25, 118, 210, 0.2)',
        transform: 'scale(1.1)',
      }
    };

    return (
      <>
        {/* Poignées de coin */}
        <Box
          sx={{
            ...handleStyle,
            width: handleSize,
            height: handleSize,
            top: -handleSize/2,
            left: -handleSize/2,
            cursor: 'nw-resize',
          }}
          onMouseDown={(e) => handleResizeStart(e, window.id, 'nw')}
        />
        <Box
          sx={{
            ...handleStyle,
            width: handleSize,
            height: handleSize,
            top: -handleSize/2,
            right: -handleSize/2,
            cursor: 'ne-resize',
          }}
          onMouseDown={(e) => handleResizeStart(e, window.id, 'ne')}
        />
        <Box
          sx={{
            ...handleStyle,
            width: handleSize,
            height: handleSize,
            bottom: -handleSize/2,
            left: -handleSize/2,
            cursor: 'sw-resize',
          }}
          onMouseDown={(e) => handleResizeStart(e, window.id, 'sw')}
        />
        <Box
          sx={{
            ...handleStyle,
            width: handleSize,
            height: handleSize,
            bottom: -handleSize/2,
            right: -handleSize/2,
            cursor: 'se-resize',
          }}
          onMouseDown={(e) => handleResizeStart(e, window.id, 'se')}
        />

        {/* Poignées de bord */}
        <Box
          sx={{
            ...handleStyle,
            width: '100%',
            height: handleSize,
            top: -handleSize/2,
            left: 0,
            cursor: 'n-resize',
          }}
          onMouseDown={(e) => handleResizeStart(e, window.id, 'n')}
        />
        <Box
          sx={{
            ...handleStyle,
            width: '100%',
            height: handleSize,
            bottom: -handleSize/2,
            left: 0,
            cursor: 's-resize',
          }}
          onMouseDown={(e) => handleResizeStart(e, window.id, 's')}
        />
        <Box
          sx={{
            ...handleStyle,
            width: handleSize,
            height: '100%',
            top: 0,
            left: -handleSize/2,
            cursor: 'w-resize',
          }}
          onMouseDown={(e) => handleResizeStart(e, window.id, 'w')}
        />
        <Box
          sx={{
            ...handleStyle,
            width: handleSize,
            height: '100%',
            top: 0,
            right: -handleSize/2,
            cursor: 'e-resize',
          }}
          onMouseDown={(e) => handleResizeStart(e, window.id, 'e')}
        />
      </>
    );
  };

  const renderWindowContent = (window: Window) => {
    if (window.isMinimized) {
      return (
        <Box sx={{ p: 1, textAlign: 'center' }}>
          <Typography variant="caption">{window.title}</Typography>
        </Box>
      );
    }

    switch (window.type) {
      case 'products':
        return (
          <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
            {/* Navigation pagination */}
            <Box sx={{ p: 1, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Typography variant="body2" color="text.secondary">
                Page {currentPage} sur {totalPages} - {filteredProducts.length} produits
              </Typography>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button
                  size="small"
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                >
                  Précédent
                </Button>
                <Chip label={`${currentPage}/${totalPages}`} size="small" />
                <Button
                  size="small"
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                >
                  Suivant
                </Button>
              </Box>
            </Box>
            
                         {/* Grille produits */}
             <Box sx={{ 
               flexGrow: 1, 
               display: 'grid', 
               gridTemplateColumns: 'repeat(5, 1fr)',
               gridTemplateRows: 'repeat(5, 1fr)',
               gap: 0.5,
               p: 0.5,
               overflow: 'hidden',
               minHeight: 0
             }}>
                                                               {currentProducts.map((product) => {
                  const categoryColor = getCategoryColor(product.category);
                  return (
                    <Paper
                      key={product.id}
                      sx={{
                        p: 0.5,
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                        display: 'flex',
                        flexDirection: 'column',
                        justifyContent: 'space-between',
                        minHeight: 0,
                        backgroundColor: `${categoryColor}15`, // Fond légèrement coloré
                        border: `2px solid ${categoryColor}`, // Bordure fine et élégante
                        borderRadius: '8px', // Coins légèrement arrondis
                        boxShadow: `0 2px 8px rgba(0,0,0,0.1)`, // Ombre subtile
                        color: '#2c3e50', // Texte foncé professionnel
                        fontWeight: '600', // Texte semi-gras
                        '&:hover': { 
                          transform: 'translateY(-2px)', 
                          boxShadow: `0 4px 12px ${categoryColor}40`,
                          backgroundColor: `${categoryColor}20`,
                          border: `2px solid ${categoryColor}`
                        },
                        '&:active': { 
                          transform: 'scale(0.98)',
                          backgroundColor: `${categoryColor}25`,
                          boxShadow: `0 2px 6px ${categoryColor}30`
                        }
                      }}
                      onClick={() => handleProductClick(product)}
                    >
                                                           <Typography variant="body2" sx={{ fontWeight: '600', fontSize: '0.75rem', lineHeight: 1.2, flexGrow: 1, color: '#2c3e50' }}>
                     {product.name}
                   </Typography>
                                        <Typography variant="h6" sx={{ fontWeight: 'bold', fontSize: '1rem', textAlign: 'center', color: categoryColor }}>
                       {product.finalPrice.toFixed(2)} €
                     </Typography>
                                       <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 0.25, gap: 0.25 }}>
                      <Chip label={`${product.salesCount || 0}`} size="small" sx={{ fontSize: '0.6rem', height: '20px', backgroundColor: categoryColor, color: 'white', fontWeight: '600' }} />
                      {product.variations.length > 0 && (
                        <Chip label={`${product.variations.length} var.`} size="small" sx={{ fontSize: '0.6rem', height: '20px', backgroundColor: '#95a5a6', color: 'white', fontWeight: '600' }} />
                      )}
                    </Box>
                  </Paper>
                );
              })}
            </Box>
          </Box>
        );

      case 'cart':
        return (
          <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
            <Box sx={{ p: 1, borderBottom: 1, borderColor: 'divider' }}>
              <Typography variant="h6" align="center" sx={{ fontWeight: 'bold' }}>
                TICKET DE CAISSE
              </Typography>
              <Typography variant="caption" align="center" display="block">
                {new Date().toLocaleDateString('fr-FR')} - {new Date().toLocaleTimeString('fr-FR')}
              </Typography>
            </Box>
            
            <List dense sx={{ flexGrow: 1, overflow: 'auto' }}>
              {cartItems.map((item, index) => {
                const price = item.selectedVariation ? item.selectedVariation.finalPrice : item.product.finalPrice;
                const variationId = item.selectedVariation?.id || null;
                
                return (
                  <ListItem key={`${item.product.id}-${variationId || 'main'}`} sx={{ py: 0.5 }}>
                    <ListItemText
                      primary={
                        <Box>
                          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                            {item.product.name}
                          </Typography>
                          {item.selectedVariation && (
                            <Chip 
                              label={item.selectedVariation.attributes} 
                              size="small" 
                              color="primary" 
                              variant="outlined"
                              sx={{ mt: 0.5, fontSize: '0.6rem' }}
                            />
                          )}
                        </Box>
                      }
                      secondary={
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>
                          <IconButton size="small" onClick={() => onUpdateQuantity(item.product.id, variationId, item.quantity - 1)}>
                            <Remove fontSize="small" />
                          </IconButton>
                          <Chip label={item.quantity} size="small" />
                          <IconButton size="small" onClick={() => onUpdateQuantity(item.product.id, variationId, item.quantity + 1)}>
                            <Add fontSize="small" />
                          </IconButton>
                        </Box>
                      }
                    />
                    <ListItemSecondaryAction>
                      <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                        {(price * item.quantity).toFixed(2)} €
                      </Typography>
                    </ListItemSecondaryAction>
                  </ListItem>
                );
              })}
            </List>
            
            <Box sx={{ p: 1, borderTop: 1, borderColor: 'divider' }}>
              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                TOTAL: {cartItems.reduce((sum, item) => {
                  const price = item.selectedVariation ? item.selectedVariation.finalPrice : item.product.finalPrice;
                  return sum + (price * item.quantity);
                }, 0).toFixed(2)} €
              </Typography>
              
              {/* Boutons d'action du ticket */}
              <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>
                {/* Bouton Recap */}
                <Button
                  variant="contained"
                  size="small"
                  onClick={() => {
                    // TODO: Implémenter la fonctionnalité Recap
                    console.log('Recap clicked');
                  }}
                  disabled={cartItems.length === 0}
                  sx={{ 
                    flex: 1,
                    fontSize: '0.8rem',
                    py: 0.5,
                    backgroundColor: '#2196f3',
                    '&:hover': {
                      backgroundColor: '#1976d2'
                    },
                    '&:disabled': {
                      backgroundColor: '#ccc'
                    }
                  }}
                >
                  📋 Recap
                </Button>
                
                {/* Bouton Remise */}
                <Button
                  variant="contained"
                  size="small"
                  onClick={() => {
                    // TODO: Implémenter la fonctionnalité Remise
                    console.log('Remise clicked');
                  }}
                  disabled={cartItems.length === 0}
                  sx={{ 
                    flex: 1,
                    fontSize: '0.8rem',
                    py: 0.5,
                    backgroundColor: '#ff9800',
                    '&:hover': {
                      backgroundColor: '#f57c00'
                    },
                    '&:disabled': {
                      backgroundColor: '#ccc'
                    }
                  }}
                >
                  💰 Remise
                </Button>
                
                {/* Bouton Attente */}
                <Button
                  variant="contained"
                  size="small"
                  onClick={() => {
                    // TODO: Implémenter la fonctionnalité Attente
                    console.log('Attente clicked');
                  }}
                  disabled={cartItems.length === 0}
                  sx={{ 
                    flex: 1,
                    fontSize: '0.8rem',
                    py: 0.5,
                    backgroundColor: '#9c27b0',
                    '&:hover': {
                      backgroundColor: '#7b1fa2'
                    },
                    '&:disabled': {
                      backgroundColor: '#ccc'
                    }
                  }}
                >
                  ⏳ Attente
                </Button>
              </Box>
            </Box>
          </Box>
        );

             case 'categories':
         return (
           <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                           {/* Ligne 1: Boutons des catégories */}
              <Box sx={{ 
                p: 1,
                borderBottom: 1,
                borderColor: 'divider',
                overflow: 'hidden'
              }}>
                <Box sx={{ 
                  display: 'flex',
                  flexDirection: 'row',
                  gap: 1,
                  alignItems: 'flex-start',
                  overflowX: 'auto',
                  overflowY: 'hidden',
                  scrollbarWidth: 'none', // Firefox
                  msOverflowStyle: 'none', // IE/Edge
                  '&::-webkit-scrollbar': { // Chrome/Safari
                    display: 'none'
                  },
                  // Support tactile et souris
                  cursor: 'grab',
                  '&:active': {
                    cursor: 'grabbing'
                  },
                  // Amélioration du défilement tactile
                  WebkitOverflowScrolling: 'touch',
                  scrollBehavior: 'smooth'
                }}>
                  <Button
                    variant={selectedCategory === null ? "contained" : "outlined"}
                    onClick={() => setSelectedCategory(null)}
                    sx={{ 
                      textTransform: 'none',
                      whiteSpace: 'nowrap',
                      minWidth: 'fit-content',
                      flexShrink: 0
                    }}
                  >
                    Toutes
                  </Button>
                  {categories.map((category) => (
                    <Button
                      key={category.id}
                      variant={selectedCategory === category.id ? "contained" : "outlined"}
                      onClick={() => setSelectedCategory(category.id)}
                      sx={{ 
                        textTransform: 'none',
                        whiteSpace: 'nowrap',
                        minWidth: 'fit-content',
                        flexShrink: 0
                      }}
                    >
                      {category.name}
                    </Button>
                  ))}
                </Box>
              </Box>
             
                           {/* Ligne 2: Recherches */}
              <Box sx={{ 
                p: 1,
                display: 'flex',
                flexDirection: 'row',
                gap: 1,
                alignItems: 'center'
              }}>
                                 {/* Recherche des articles */}
                 <TextField
                   size="small"
                   placeholder="Rechercher article..."
                   variant="outlined"
                   sx={{ 
                     flex: 1,
                     '& .MuiOutlinedInput-root': {
                       borderColor: '#2196f3',
                       backgroundColor: '#e3f2fd',
                       '&:hover .MuiOutlinedInput-notchedOutline': {
                         borderColor: '#1976d2'
                       },
                       '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                         borderColor: '#2196f3'
                       },
                       '&:hover': {
                         backgroundColor: '#bbdefb'
                       },
                       '&.Mui-focused': {
                         backgroundColor: '#90caf9'
                       }
                     }
                   }}
                   value={searchTerm}
                   onChange={(e) => setSearchTerm(e.target.value)}
                   InputProps={{
                     startAdornment: <Search sx={{ fontSize: 16, mr: 1, color: '#2196f3' }} />
                   }}
                 />
                 
                 {/* Recherche des catégories */}
                 <TextField
                   size="small"
                   placeholder="Rechercher catégorie..."
                   variant="outlined"
                   sx={{ 
                     flex: 1,
                     '& .MuiOutlinedInput-root': {
                       borderColor: '#ff9800',
                       backgroundColor: '#fff3e0',
                       '&:hover .MuiOutlinedInput-notchedOutline': {
                         borderColor: '#f57c00'
                       },
                       '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                         borderColor: '#ff9800'
                       },
                       '&:hover': {
                         backgroundColor: '#ffe0b2'
                       },
                       '&.Mui-focused': {
                         backgroundColor: '#ffcc80'
                       }
                     }
                   }}
                   InputProps={{
                     startAdornment: <Search sx={{ fontSize: 16, mr: 1, color: '#ff9800' }} />
                   }}
                 />
              </Box>
           </Box>
         );

             case 'search':
         const totalAmount = cartItems.reduce((sum, item) => {
           const price = item.selectedVariation ? item.selectedVariation.finalPrice : item.product.finalPrice;
           return sum + (price * item.quantity);
         }, 0);
         
         return (
           <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
             <Typography variant="h6" sx={{ p: 1, borderBottom: 1, borderColor: 'divider' }}>
               Modes de Règlement
             </Typography>
                           <Box sx={{ p: 0.5, flexGrow: 1, display: 'flex', flexDirection: 'column', gap: 0.5 }}>
                                 {/* Bouton Espèces - Prioritaire */}
                 <Button
                   variant="contained"
                   fullWidth
                   sx={{ 
                     py: 1, 
                     fontSize: '1.1rem', 
                     fontWeight: 'bold', 
                     minHeight: '45px',
                     backgroundColor: '#2e7d32',
                     '&:hover': { backgroundColor: '#1b5e20' },
                     '&:disabled': { backgroundColor: '#ccc' }
                   }}
                   onClick={() => onCheckout()}
                   disabled={cartItems.length === 0}
                 >
                   💵 ESPÈCES - {totalAmount.toFixed(2)} €
                 </Button>
                 
                 {/* Ligne SumUp + Carte - Secondaire */}
                 <Box sx={{ display: 'flex', gap: 0.5 }}>
                   {/* Bouton SumUp */}
                   <Button
                     variant="contained"
                     sx={{ 
                       flex: 1,
                       py: 0.75, 
                       fontSize: '1rem', 
                       fontWeight: 'bold', 
                       minHeight: '40px',
                       backgroundColor: '#1976d2',
                       '&:hover': { backgroundColor: '#1565c0' },
                       '&:disabled': { backgroundColor: '#ccc' }
                     }}
                     onClick={() => onCheckout()}
                     disabled={cartItems.length === 0}
                   >
                     📱 SumUp - {totalAmount.toFixed(2)} €
                   </Button>
                   
                   {/* Bouton Carte */}
                   <Button
                     variant="contained"
                     sx={{ 
                       flex: 1,
                       py: 0.75, 
                       fontSize: '1rem', 
                       fontWeight: 'bold', 
                       minHeight: '40px',
                       backgroundColor: '#ff9800',
                       '&:hover': { backgroundColor: '#f57c00' },
                       '&:disabled': { backgroundColor: '#ccc' }
                     }}
                     onClick={() => onCheckout()}
                     disabled={cartItems.length === 0}
                   >
                     💳 Carte - {totalAmount.toFixed(2)} €
                   </Button>
                 </Box>
                 
                 {/* Bouton Chèque - Tertiaire */}
                 <Button
                   variant="outlined"
                   fullWidth
                   sx={{ 
                     py: 0.5, 
                     fontSize: '0.9rem', 
                     fontWeight: 'bold', 
                     minHeight: '35px',
                     borderColor: '#9c27b0',
                     color: '#9c27b0',
                     '&:hover': { 
                       borderColor: '#7b1fa2', 
                       backgroundColor: 'rgba(156, 39, 176, 0.1)' 
                     },
                     '&:disabled': { borderColor: '#ccc', color: '#ccc' }
                   }}
                   onClick={() => onCheckout()}
                   disabled={cartItems.length === 0}
                 >
                   📝 Chèque - {totalAmount.toFixed(2)} €
                 </Button>
              </Box>
           </Box>
         );

             case 'settings':
         return (
           <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
             <Box sx={{ p: 1, flexGrow: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
               <Typography variant="body2" color="text.secondary" align="center">
                 Fenêtre vide - Prête pour de nouvelles fonctionnalités
               </Typography>
             </Box>
           </Box>
         );

             case 'import':
         return (
           <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
             <Typography variant="h6" sx={{ p: 1, borderBottom: 1, borderColor: 'divider' }}>
               Gestion Données
             </Typography>
             <Box sx={{ p: 1, flexGrow: 1, display: 'flex', flexDirection: 'column', gap: 1 }}>
               <Typography variant="body2" align="center" sx={{ mb: 1 }}>
                 {products.length} produits chargés
               </Typography>
               <Typography variant="body2" align="center" sx={{ mb: 2 }}>
                 {categories.length} catégories
               </Typography>
               <Button
                 variant="outlined"
                 size="small"
                 startIcon={<ImportExport />}
                 onClick={() => {
                   // TODO: Ouvrir l'import CSV
                   alert('Fonctionnalité d\'import CSV à implémenter');
                 }}
               >
                 Importer CSV
               </Button>
               <Button
                 variant="outlined"
                 size="small"
                 onClick={() => {
                   // TODO: Exporter les données
                   alert('Fonctionnalité d\'export à implémenter');
                 }}
               >
                 Exporter Données
               </Button>
               <Button
                 variant="outlined"
                 size="small"
                                   onClick={() => {
                    // TODO: Réinitialiser aux données par défaut
                    // eslint-disable-next-line no-restricted-globals
                    if (confirm('Réinitialiser aux données par défaut ?')) {
                      // Réinitialiser les données
                    }
                  }}
               >
                 Réinitialiser
               </Button>
             </Box>
           </Box>
         );

      default:
        return null;
    }
  };

  return (
    <Box sx={{ 
      position: 'relative', 
      width: '100vw', 
      height: '100vh', 
      overflow: 'hidden',
      backgroundColor: '#f5f5f5'
    }}>
                          {/* Cadre rouge englobant les fenêtres actuelles */}
       <Box sx={{
         position: 'absolute',
         top: 80, // y minimum des fenêtres
         left: 20, // x minimum des fenêtres
         width: 1220, // x max (840 + 400) - x min (20) = 1220
         height: 926, // y max (810 + 196) - y min (80) = 926
         border: '3px solid red',
         borderStyle: 'dashed',
         zIndex: 0,
         pointerEvents: 'none',
         backgroundColor: 'rgba(255, 0, 0, 0.05)'
       }}>
         <Typography 
           variant="caption" 
           sx={{ 
             position: 'absolute', 
             top: -20, 
             left: 10, 
             color: 'red', 
             fontWeight: 'bold',
             backgroundColor: 'white',
             px: 1
           }}
         >
           ESPACE FENÊTRES: 1220×926
         </Typography>
         <Typography 
           variant="caption" 
           sx={{ 
             position: 'absolute', 
             bottom: -20, 
             right: 10, 
             color: 'blue', 
             fontWeight: 'bold',
             backgroundColor: 'white',
             px: 1
           }}
         >
           POSITION: (20,80) à (1240,1006)
         </Typography>
       </Box>
                           {windows
          .filter(window => ['categories', 'products', 'cart', 'search', 'window5', 'window6', 'window7'].includes(window.id)) // Afficher les 7 fenêtres
          .map((window) => (
                           <Paper
            key={window.id}
            sx={{
              position: 'absolute',
              left: window.x,
              top: window.y,
              width: window.width,
              height: window.height,
              zIndex: window.zIndex,
              display: 'flex',
              flexDirection: 'column',
              boxShadow: 3,
              border: '2px solid',
              cursor: isLayoutLocked ? 'default' : 'move',
              // Couleurs professionnelles distinctes pour chaque fenêtre
              ...(window.id === 'categories' && {
                borderColor: '#1976d2',
                backgroundColor: '#f3f8ff',
                '& .MuiTypography-h6': { color: '#1976d2' }
              }),
              ...(window.id === 'products' && {
                borderColor: '#2e7d32',
                backgroundColor: '#f1f8e9',
                '& .MuiTypography-h6': { color: '#2e7d32' }
              }),
              ...(window.id === 'cart' && {
                borderColor: '#d32f2f',
                backgroundColor: '#ffebee',
                '& .MuiTypography-h6': { color: '#d32f2f' }
              }),
              ...(window.id === 'search' && {
                borderColor: '#ed6c02',
                backgroundColor: '#fff4e5',
                '& .MuiTypography-h6': { color: '#ed6c02' }
              }),
              ...(window.id === 'window5' && {
                borderColor: '#9c27b0',
                backgroundColor: '#f3e5f5',
                '& .MuiTypography-h6': { color: '#9c27b0' }
              }),
              ...(window.id === 'window6' && {
                borderColor: '#0288d1',
                backgroundColor: '#e1f5fe',
                '& .MuiTypography-h6': { color: '#0288d1' }
              }),
              ...(window.id === 'window7' && {
                borderColor: '#388e3c',
                backgroundColor: '#e8f5e8',
                '& .MuiTypography-h6': { color: '#388e3c' }
              })
            }}
            onMouseDown={(e) => handleMouseDown(e, window.id)}
          >
           {/* Contenu de la fenêtre */}
           <Box sx={{ flexGrow: 1, overflow: 'hidden', position: 'relative' }}>
             {renderWindowContent(window)}
             {renderResizeHandles(window)}
           </Box>
         </Paper>
      ))}

      {/* Modale de sélection des déclinaisons */}
      <VariationModal
        open={variationModalOpen}
        product={selectedProduct}
        onClose={() => setVariationModalOpen(false)}
        onSelectVariation={handleVariationSelect}
      />
    </Box>
  );
};

export default WindowManager; 