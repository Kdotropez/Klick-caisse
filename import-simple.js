const fs = require('fs');

// Lire le fichier CSV
console.log('üìñ Lecture du fichier CSV...');
const content = fs.readFileSync('bdd complete v2.csv', 'utf8');
const lines = content.split('\n').filter(line => line.trim());

// Analyser la premi√®re ligne pour comprendre la structure
const firstLine = lines[0];
console.log('Premi√®re ligne:', firstLine.substring(0, 200) + '...');

// Extraire les colonnes manuellement bas√© sur ce qu'on sait
const products = [];
const categories = new Set();
const associatedCategoriesSet = new Set();

console.log('üìä Traitement des donn√©es...');

for (let i = 1; i < lines.length; i++) {
  const line = lines[i];
  if (!line.trim()) continue;
  
  // Diviser par tabulations
  const values = line.split('\t');
  
  if (values.length < 15) continue; // V√©rifier qu'on a assez de colonnes
  
  try {
    // Extraire les valeurs bas√©es sur la position connue
    const boutiqueId = values[0] || '';
    const name = values[1] || 'Produit sans nom';
    const id = values[2] || `prod_${i}`;
    const reference = values[3] || '';
    const ean13 = values[5] || '';
    const category = values[7] || 'G√©n√©ral';
    // Nettoyer les prix avant de les parser
    const cleanWholesalePriceStr = (values[8] || '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '').replace(',', '.');
    const cleanFinalPriceStr = (values[14] || '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '').replace(',', '.');
    const wholesalePrice = parseFloat(cleanWholesalePriceStr) || 0;
    const finalPrice = parseFloat(cleanFinalPriceStr) || 0;
    const stock = parseInt(values[15]) || 0;
    
    // Traiter les cat√©gories associ√©es (colonne 10)
    const associatedCategoriesStr = values[10] || '';
    const associatedCategories = associatedCategoriesStr
      .split(',')
      .map(cat => cat.trim())
      .filter(cat => cat && cat.length > 0);
    
    // Nettoyer les donn√©es (supprimer les caract√®res de contr√¥le UTF-16)
    const cleanName = name.replace(/[\u0000-\u001F\u007F-\u009F]/g, '').replace(/[^\w\s\-\.]/g, '').trim();
    const cleanCategory = category.replace(/[\u0000-\u001F\u007F-\u009F]/g, '').replace(/[^\w\s\-\.]/g, '').trim();
    const cleanId = id.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
    const cleanReference = reference.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
    const cleanEan13 = ean13.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
    const cleanAssociatedCategories = associatedCategories
      .map(cat => cat.replace(/[\u0000-\u001F\u007F-\u009F]/g, '').replace(/[^\w\s\-\.]/g, '').trim())
      .filter(cat => cat && cat.length > 0);
    
    if (cleanName && cleanName !== 'Produit sans nom') {
      // Cr√©er des d√©clinaisons bas√©es sur les donn√©es disponibles
      const variations = [];
      
      // V√©rifier s'il y a des donn√©es de d√©clinaison
      const variationId = (values[19] || '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
      const variationEan13 = (values[20] || '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
      const variationReference = (values[21] || '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
      const variationAttributes = (values[17] || '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '');
      const variationPriceImpact = parseFloat((values[23] || '').replace(/[\u0000-\u001F\u007F-\u009F]/g, '').replace(',', '.')) || 0;
      
      // Si on a des donn√©es de d√©clinaison, cr√©er une d√©clinaison
      if (variationId && variationId.trim()) {
        const variation = {
          id: variationId,
          ean13: variationEan13,
          reference: variationReference,
          attributes: variationAttributes || 'D√©clinaison',
          priceImpact: variationPriceImpact,
          finalPrice: finalPrice + variationPriceImpact
        };
        variations.push(variation);
      }
      
      // Si pas de d√©clinaison dans le CSV, cr√©er des d√©clinaisons par d√©faut bas√©es sur les cat√©gories associ√©es
      if (variations.length === 0 && cleanAssociatedCategories.length > 0) {
        // Cr√©er une d√©clinaison pour chaque cat√©gorie associ√©e significative
        const significantCategories = cleanAssociatedCategories.filter(cat => 
          cat !== cleanCategory && 
          !cat.includes('VERRE') && 
          !cat.includes('Verres') &&
          cat.length > 2
        );
        
        significantCategories.slice(0, 3).forEach((cat, index) => {
          const variation = {
            id: `${cleanId}_var_${index + 1}`,
            ean13: `${cleanEan13}_${index + 1}`,
            reference: `${cleanReference}_${cat.substring(0, 3).toUpperCase()}`,
            attributes: cat,
            priceImpact: 0,
            finalPrice: finalPrice
          };
          variations.push(variation);
        });
      }
      
      const product = {
        id: cleanId,
        name: cleanName,
        reference: cleanReference,
        ean13: cleanEan13,
        category: cleanCategory,
        associatedCategories: cleanAssociatedCategories,
        wholesalePrice: wholesalePrice,
        finalPrice: finalPrice,
        crossedPrice: finalPrice,
        salesCount: 0,
        position: 0,
        remisable: true,
        variations: variations
      };
      
      products.push(product);
      categories.add(cleanCategory);
      cleanAssociatedCategories.forEach(cat => associatedCategoriesSet.add(cat));
    }
  } catch (error) {
    console.error(`Erreur ligne ${i}:`, error.message);
  }
}

console.log(`‚úÖ Produits trait√©s: ${products.length}`);
console.log(`‚úÖ Cat√©gories principales: ${categories.size}`);
console.log(`‚úÖ Sous-cat√©gories uniques: ${associatedCategoriesSet.size}`);

// Cr√©er les cat√©gories
const categoriesArray = Array.from(categories).map((catName, index) => ({
  id: `cat_${index + 1}`,
  name: catName,
  color: getRandomColor(),
  productOrder: []
}));

// G√©n√©rer le fichier TypeScript
const outputContent = `// Donn√©es import√©es automatiquement depuis bdd complete v2.csv
// G√©n√©r√© le: ${new Date().toISOString()}
// Syst√®me: Import simple avec cat√©gories associ√©es

import { Product, Category } from '../types/Product';

export const products = ${JSON.stringify(products, null, 2)};

export const categories = ${JSON.stringify(categoriesArray, null, 2)};

const productionData = {
  products,
  categories
};

export default productionData;

// Fonctions pour charger et sauvegarder les donn√©es
export const loadProductionData = (): { products: Product[]; categories: Category[] } => {
  // Essayer de charger depuis localStorage d'abord
  try {
    const savedCategories = localStorage.getItem('klickCaisse_categories');
    const savedProducts = localStorage.getItem('klickCaisse_products');
    
    if (savedCategories && savedProducts) {
      const parsedCategories = JSON.parse(savedCategories);
      const parsedProducts = JSON.parse(savedProducts);
      console.log('‚úÖ Donn√©es charg√©es depuis localStorage:', { 
        products: parsedProducts.length, 
        categories: parsedCategories.length 
      });
      return {
        products: parsedProducts,
        categories: parsedCategories
      };
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement depuis localStorage:', error);
  }

  // Fallback vers les donn√©es par d√©faut
  console.log('üì¶ Chargement des donn√©es par d√©faut (import simple)');
  return {
    products,
    categories
  };
};

export const saveProductionData = (newProducts: Product[], newCategories: Category[]): void => {
  // Sauvegarder dans localStorage pour persistance
  try {
    localStorage.setItem('klickCaisse_categories', JSON.stringify(newCategories));
    localStorage.setItem('klickCaisse_products', JSON.stringify(newProducts));
    console.log('‚úÖ Donn√©es sauvegard√©es dans localStorage:', { 
      products: newProducts.length, 
      categories: newCategories.length 
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la sauvegarde:', error);
  }
};
`;

fs.writeFileSync('./src/data/productionData.ts', outputContent);

console.log('\nüéâ Import simple termin√© avec succ√®s !');
console.log(`üìÅ Fichier g√©n√©r√©: ./src/data/productionData.ts`);
console.log(`üìä Total produits: ${products.length}`);
console.log(`üè∑Ô∏è  Total cat√©gories: ${categoriesArray.length}`);
console.log(`üîó Total sous-cat√©gories: ${associatedCategoriesSet.size}`);

// Afficher quelques exemples
console.log('\nüìã Exemples de produits:');
products.slice(0, 3).forEach(product => {
  console.log(`   - ${product.name} (${product.category})`);
  if (product.associatedCategories.length > 0) {
    console.log(`     Sous-cat√©gories: ${product.associatedCategories.join(', ')}`);
  }
});

console.log('\nüìã Exemples de sous-cat√©gories:');
Array.from(associatedCategoriesSet).slice(0, 10).forEach(cat => {
  console.log(`   - ${cat}`);
});

function getRandomColor() {
  const colors = [
    '#1976d2', '#388e3c', '#f57c00', '#d32f2f', '#7b1fa2',
    '#303f9f', '#c2185b', '#5d4037', '#455a64', '#ff6f00'
  ];
  return colors[Math.floor(Math.random() * colors.length)];
} 