const fs = require('fs');
const path = require('path');

console.log('=== DIAGNOSTIC DES CL√îTURES ===');

// Fonction pour analyser un fichier JSON
function analyzeFile(filePath) {
  try {
    console.log(`\nüìÅ Analyse de: ${filePath}`);
    
    if (!fs.existsSync(filePath)) {
      console.log('‚ùå Fichier non trouv√©');
      return null;
    }
    
    const content = fs.readFileSync(filePath, 'utf8');
    const data = JSON.parse(content);
    
    console.log('‚úÖ Fichier JSON valide');
    
    // V√©rifier les cl√¥tures
    let closures = [];
    
    // Chercher dans diff√©rentes structures possibles
    if (data.closures && Array.isArray(data.closures)) {
      closures = data.closures;
      console.log(`üìä Cl√¥tures trouv√©es dans data.closures: ${closures.length}`);
    }
    
    if (data.klick_caisse_closures && Array.isArray(data.klick_caisse_closures)) {
      closures = data.klick_caisse_closures;
      console.log(`üìä Cl√¥tures trouv√©es dans data.klick_caisse_closures: ${closures.length}`);
    }
    
    // Chercher dans localStorage simul√©
    if (data.localStorage && data.localStorage.klick_caisse_closures) {
      try {
        const localStorageClosures = JSON.parse(data.localStorage.klick_caisse_closures);
        if (Array.isArray(localStorageClosures)) {
          closures = localStorageClosures;
          console.log(`üìä Cl√¥tures trouv√©es dans localStorage: ${closures.length}`);
        }
      } catch (e) {
        console.log('‚ùå Erreur parsing localStorage cl√¥tures');
      }
    }
    
    // Afficher les d√©tails des cl√¥tures
    if (closures.length > 0) {
      console.log('\nüìã D√©tails des cl√¥tures:');
      closures.forEach((closure, index) => {
        console.log(`  Z${closure.zNumber || '?'} - ${closure.closedAt || 'date inconnue'} - ${closure.transactions?.length || 0} transactions`);
      });
    }
    
    // V√©rifier les transactions par jour
    let transactionsByDay = {};
    if (data.transactionsByDay) {
      transactionsByDay = data.transactionsByDay;
      console.log(`üìÖ Jours avec transactions: ${Object.keys(transactionsByDay).length}`);
    }
    
    if (data.klick_caisse_transactions_by_day) {
      transactionsByDay = data.klick_caisse_transactions_by_day;
      console.log(`üìÖ Jours avec transactions (klick_caisse_): ${Object.keys(transactionsByDay).length}`);
    }
    
    if (Object.keys(transactionsByDay).length > 0) {
      console.log('\nüìÖ Jours disponibles:');
      Object.keys(transactionsByDay).forEach(date => {
        const transactions = transactionsByDay[date];
        console.log(`  ${date}: ${transactions.length} transactions`);
      });
    }
    
    return { closures, transactionsByDay };
    
  } catch (error) {
    console.log(`‚ùå Erreur analyse: ${error.message}`);
    return null;
  }
}

// Analyser tous les fichiers JSON dans le r√©pertoire
const jsonFiles = [
  'klick-caisse-backup-2025-08-11-21-53-40.json',
  'base complete 15 aout.nested.json',
  'base complete 15 aout.nested - Copie.json'
];

let allClosures = [];
let allTransactionsByDay = {};

console.log('\nüîç Recherche dans les fichiers JSON...');

jsonFiles.forEach(file => {
  const result = analyzeFile(file);
  if (result) {
    allClosures = allClosures.concat(result.closures);
    Object.assign(allTransactionsByDay, result.transactionsByDay);
  }
});

console.log(`\nüìä R√âSUM√â GLOBAL:`);
console.log(`  Cl√¥tures trouv√©es: ${allClosures.length}`);
console.log(`  Jours avec transactions: ${Object.keys(allTransactionsByDay).length}`);

// Cr√©er un script de r√©cup√©ration
if (allClosures.length > 0 || Object.keys(allTransactionsByDay).length > 0) {
  console.log('\nüîÑ Cr√©ation du script de r√©cup√©ration...');
  
  let recoveryScript = `
// Script de r√©cup√©ration des cl√¥tures
console.log('=== R√âCUP√âRATION DES CL√îTURES ===');

// Cl√¥tures trouv√©es
const recoveredClosures = ${JSON.stringify(allClosures, null, 2)};

// Transactions par jour
const recoveredTransactionsByDay = ${JSON.stringify(allTransactionsByDay, null, 2)};

console.log('üìä Cl√¥tures √† r√©cup√©rer:', recoveredClosures.length);
console.log('üìÖ Jours avec transactions:', Object.keys(recoveredTransactionsByDay).length);

// Sauvegarder les cl√¥tures
if (recoveredClosures.length > 0) {
  localStorage.setItem('klick_caisse_closures', JSON.stringify(recoveredClosures));
  console.log('‚úÖ Cl√¥tures sauvegard√©es');
}

// Sauvegarder les transactions par jour
if (Object.keys(recoveredTransactionsByDay).length > 0) {
  localStorage.setItem('klick_caisse_transactions_by_day', JSON.stringify(recoveredTransactionsByDay));
  console.log('‚úÖ Transactions par jour sauvegard√©es');
}

// V√©rifier la sauvegarde
const savedClosures = localStorage.getItem('klick_caisse_closures');
const savedTransactions = localStorage.getItem('klick_caisse_transactions_by_day');

console.log('üìä V√©rification:');
console.log('  Cl√¥tures sauvegard√©es:', savedClosures ? JSON.parse(savedClosures).length : 0);
console.log('  Transactions sauvegard√©es:', savedTransactions ? Object.keys(JSON.parse(savedTransactions)).length : 0);

alert('‚úÖ R√©cup√©ration termin√©e! Rechargez la page pour voir les cl√¥tures.');
`;

  fs.writeFileSync('recovery-closures.js', recoveryScript);
  console.log('‚úÖ Script de r√©cup√©ration cr√©√©: recovery-closures.js');
  
  // Cr√©er aussi un fichier JSON avec toutes les donn√©es
  const fullData = {
    closures: allClosures,
    transactionsByDay: allTransactionsByDay,
    recoveredAt: new Date().toISOString()
  };
  
  fs.writeFileSync('recovered-data.json', JSON.stringify(fullData, null, 2));
  console.log('‚úÖ Donn√©es r√©cup√©r√©es sauvegard√©es: recovered-data.json');
}

console.log('\n‚úÖ Diagnostic termin√©!');
