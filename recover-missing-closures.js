// Script pour r√©cup√©rer les cl√¥tures manquantes depuis les sauvegardes automatiques
console.log('üîÑ R√©cup√©ration des cl√¥tures manquantes...');

// 1. R√©cup√©rer les cl√¥tures actuelles
let currentClosures = [];
try {
  const current = localStorage.getItem('klick_caisse_closures');
  if (current) {
    currentClosures = JSON.parse(current);
  }
} catch (e) {
  console.error('‚ùå Erreur lecture cl√¥tures actuelles:', e);
}

console.log(`üìã Cl√¥tures actuelles : ${currentClosures.length}`);

// 2. R√©cup√©rer toutes les sauvegardes automatiques
let allBackups = [];
try {
  const autoBackups = localStorage.getItem('klick_caisse_auto_backups');
  if (autoBackups) {
    allBackups = JSON.parse(autoBackups);
  }
} catch (e) {
  console.error('‚ùå Erreur lecture sauvegardes:', e);
}

console.log(`üíæ Sauvegardes disponibles : ${allBackups.length}`);

// 3. Collecter toutes les cl√¥tures des sauvegardes
let recoveredClosures = [];
let allClosureNumbers = new Set();

// Ajouter les cl√¥tures actuelles
currentClosures.forEach(closure => {
  allClosureNumbers.add(closure.zNumber);
});

// Parcourir toutes les sauvegardes pour trouver des cl√¥tures manquantes
allBackups.forEach((backup, index) => {
  if (backup.data && backup.data.closures) {
    console.log(`üîç Analyse sauvegarde ${index + 1} (${new Date(backup.ts).toLocaleString('fr-FR')})`);
    
    backup.data.closures.forEach(closure => {
      if (!allClosureNumbers.has(closure.zNumber)) {
        console.log(`  ‚úÖ Cl√¥ture Z${closure.zNumber} trouv√©e et r√©cup√©r√©e !`);
        recoveredClosures.push(closure);
        allClosureNumbers.add(closure.zNumber);
      }
    });
  }
});

console.log(`\nüéØ R√©sultat : ${recoveredClosures.length} cl√¥tures r√©cup√©r√©es`);

// 4. Fusionner avec les cl√¥tures actuelles
if (recoveredClosures.length > 0) {
  const allClosures = [...currentClosures, ...recoveredClosures];
  
  // Trier par num√©ro Z
  allClosures.sort((a, b) => a.zNumber - b.zNumber);
  
  // Sauvegarder
  try {
    localStorage.setItem('klick_caisse_closures', JSON.stringify(allClosures));
    console.log(`‚úÖ ${allClosures.length} cl√¥tures sauvegard√©es au total`);
    
    // Afficher le r√©sum√©
    console.log('\nüìä R√©sum√© des cl√¥tures :');
    allClosures.forEach(closure => {
      const date = new Date(closure.closedAt);
      const recovered = recoveredClosures.some(rc => rc.zNumber === closure.zNumber);
      const marker = recovered ? 'üîÑ' : '‚úÖ';
      console.log(`  ${marker} Z${closure.zNumber} - ${date.toLocaleString('fr-FR')} - ${closure.totalTransactions} tickets - ${closure.totalCA}‚Ç¨`);
    });
    
    // Mettre √† jour le compteur Z si n√©cessaire
    const maxZ = Math.max(...allClosures.map(c => c.zNumber));
    const currentCounter = parseInt(localStorage.getItem('klick_caisse_z_counter') || '0');
    
    if (maxZ > currentCounter) {
      localStorage.setItem('klick_caisse_z_counter', String(maxZ));
      console.log(`üî¢ Compteur Z mis √† jour : ${maxZ}`);
    }
    
  } catch (e) {
    console.error('‚ùå Erreur sauvegarde cl√¥tures:', e);
  }
} else {
  console.log('‚ÑπÔ∏è Aucune cl√¥ture manquante trouv√©e');
}

console.log('\n‚ú® R√©cup√©ration termin√©e !');
