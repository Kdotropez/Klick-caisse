// Script pour v√©rifier les sauvegardes automatiques disponibles
console.log('üîç V√©rification des sauvegardes automatiques...');

// 1. V√©rifier les sauvegardes automatiques dans localStorage
const autoBackups = localStorage.getItem('klick_caisse_auto_backups');
if (autoBackups) {
  try {
    const backups = JSON.parse(autoBackups);
    console.log(`‚úÖ ${backups.length} sauvegardes automatiques trouv√©es :`);
    backups.forEach((backup, index) => {
      const date = new Date(backup.ts);
      console.log(`  ${index + 1}. ${date.toLocaleString('fr-FR')} - Z${backup.data.zCounter || '?'}`);
      if (backup.data.closures && backup.data.closures.length > 0) {
        console.log(`     üìä ${backup.data.closures.length} cl√¥tures`);
      }
    });
  } catch (e) {
    console.error('‚ùå Erreur parsing sauvegardes auto:', e);
  }
} else {
  console.log('‚ö†Ô∏è Aucune sauvegarde automatique trouv√©e');
}

// 2. V√©rifier les cl√¥tures actuelles
const currentClosures = localStorage.getItem('klick_caisse_closures');
if (currentClosures) {
  try {
    const closures = JSON.parse(currentClosures);
    console.log(`\nüìã Cl√¥tures actuelles : ${closures.length}`);
    closures.forEach(closure => {
      const date = new Date(closure.closedAt);
      console.log(`  Z${closure.zNumber} - ${date.toLocaleString('fr-FR')} - ${closure.totalTransactions} tickets - ${closure.totalCA}‚Ç¨`);
    });
  } catch (e) {
    console.error('‚ùå Erreur parsing cl√¥tures:', e);
  }
} else {
  console.log('\n‚ö†Ô∏è Aucune cl√¥ture actuelle');
}

// 3. V√©rifier le compteur Z
const zCounter = localStorage.getItem('klick_caisse_z_counter');
console.log(`\nüî¢ Compteur Z actuel : ${zCounter || 'Non d√©fini'}`);

// 4. V√©rifier les transactions par jour
const transactionsByDay = localStorage.getItem('klick_caisse_transactions_by_day');
if (transactionsByDay) {
  try {
    const txMap = JSON.parse(transactionsByDay);
    const days = Object.keys(txMap);
    console.log(`\nüìÖ Transactions par jour : ${days.length} jours`);
    days.forEach(day => {
      const transactions = txMap[day];
      if (Array.isArray(transactions)) {
        console.log(`  ${day} : ${transactions.length} tickets`);
      }
    });
  } catch (e) {
    console.error('‚ùå Erreur parsing transactions:', e);
  }
}

console.log('\n‚ú® V√©rification termin√©e !');
